from contextlib import contextmanager
from beet.contrib.vanilla import load_vanilla
from beet import Model
from kmc import config
from kmc.item:utils import parse_name

import os
import json

class Item:
    def __init__(self, namespaced_name_, item_, components_={}):
        parsed_name = parse_name(namespaced_name_)
        
        self.name = parsed_name["name"]
        self.namespace = parsed_name["namespace"]
        self.namespaced_name = namespaced_name_
        self.item = item_
        self.components = components_

    def create_model(self, name, parent="generated"):
        namespaced_name = self.namespace + ':' + name
        add_custom_model_data(namespaced_name, self.item)


# Updates cache for the new entry and returns the appropriate value
def retrieve_cmd_cache(name, item):
    # Retrieve cache data
    if not os.path.isdir('.kmc'):
        os.mkdir('.kmc') # Create cache if it doesn't exist
    if not os.path.exists('.kmc/cmd_cache.json'):
        with open('.kmc/cmd_cache.json', 'w'):
            pass


    cache = {}
    # Load cache into memory
    with open('.kmc/cmd_cache.json', 'r') as file:
        txt = file.read()
        if not (txt == ""):
            cache = json.loads(txt)
    
    model_num = config["base_cmd"]
    
    
    # Look for a matching cache entry
    if item in cache.keys():

        # Check for matching name in cache
            # If matching name, set model_num to that entry
            # If no matching name:
                # Find the first available cmd value, starting at the root number
                # Set model_num to that value
                # Create a cache entry at that value

        if name in cache[item].values():
            for entry in cache[item].keys():
                if cache[item][entry] == name:
                    model_num = entry
        else:
            # Find lowest available value
            while (str(model_num) in cache[item].keys()):
                model_num += 1
            cache[item].update({model_num : name})
        
    else:
        # create cache entry
        cache[item] =  {}
        cache[item].update({model_num : name})



    # Write back to cache
    with open(".kmc/cmd_cache.json", "w") as file:
        json.dump(cache , file) 

    return model_num

def add_custom_model_data(model_name, item):
    parsed_name = parse_name(model_name)
    name = parsed_name["name"]
    namespace = parsed_name["namespace"]

    custom_model_data = int(retrieve_cmd_cache(model_name, item))
    base_item_location = f"minecraft:item/{item}"
    ctx.require(load_vanilla(match={model: base_item_location}))

    ctx.generate(base_item_location, merge=Model({
        "overrides":[
            { "predicate": {"custom_model_data": custom_model_data}, "model": f"{namespace}:{name}"}
        ]
    }))

    return custom_model_data

def add_texture(texture_name, item, parent="minecraft:item/generated"):
    parsed_name = parse_name(texture_name)
    name = parsed_name["name"]
    namespace = parsed_name["namespace"]

    model f"{namespace}:{name}" {
        "parent": f"{parent}",
        "textures": {
            "layer0": f"{namespace}:{name}"
        }
    }

    merge atlas minecraft:blocks {
        "sources": [
            {"type": "single","resource": f"{namespace}:{name}"}
        ]
    }

    return add_custom_model_data(texture_name, item)

def add_texture_atlas(name):
        merge atlas minecraft:blocks {
        "sources": [
            {"type": "single","resource": name}
        ]
    }