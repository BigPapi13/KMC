from contextlib import contextmanager
from beet.contrib.vanilla import load_vanilla
from beet import Model


class Item:
    def __init__(self, id_, namespace_, item_):
        self.id = id_
        self.namespace = namespace_
        self.item = item_

    def create_model(self, custom_model_data, parent="generated"):
        # Create model
        model f"{self.namespace}:item/{self.id}" {
            "parent": f"minecraft:item/{parent}",
            "textures": {
                "layer0": f"{self.namespace}:item/{self.id}"
            }
        }
        
        base_item_location = f"minecraft:item/{self.item}"
        ctx.require(load_vanilla(match={model: base_item_location}))

        ctx.generate(base_item_location, merge=Model({
            "overrides":[
                { "predicate": {"custom_model_data": custom_model_data}, "model": f"{self.namespace}:item/{self.id}"}
            ]
        }))